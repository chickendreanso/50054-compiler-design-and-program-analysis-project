[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestSimpInt, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestPAInt, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestParser, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestTypeInf, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestMMUpDown, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestLexer, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(sutd.compiler.simp.TestMaximalMunch, org.scalatest.tools.Framework$$anon$1@126cc601, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestPAInt:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test PA interpretor with sum(3)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test PA interpretor with fib(4)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test PA interpretor with with sum((0 to 10).map(fib(_)))[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestMaximalMunch:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch: y = 1; x = y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch: z = (x + 3) * (y - 5); return z[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    x = 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    y = 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    i = 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    while (i < y) {[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        x = x + i[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        i = i + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    return x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestSimpInt:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test simp evalExp with c + s[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test simp evalExp with c < (s * 2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test simp interpretor with sum(3)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test simp interpretor with fib(4)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test simp interpretor with sum((0 to 10).map(fib(_)))[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestLexer:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test lexer: lexing y = 1; x = x + 1; [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test lexer: lexing y = input; [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test lexer: lexing [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            x = input;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            s = 0;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            c = 0;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            while c < x {[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m                s = c + s;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m                c = c + 1;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            return s;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestMMUpDown:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch v2 genExp: y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch v2 genExp: (x + 3) * (y - 5)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch v2: y = 1; x = y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch v2: z = (x + 3) * (y - 5); return z[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test maximal munch v2:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    x = 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    y = 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    i = 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    while (i < y) {[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        x = x + i[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        i = i + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    return x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestParser:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_spaces: parsing 0 spaces[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_spaces: parsing 3 spaces[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_spaces: parsing 3 tabs[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_spaces: should not parse id[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_exp: parsing x + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test p_exp: parsing x - (1 + (y * 2))[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test parser: parsing y = 1; x = x + 1;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test parser: parsing [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mx = input;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32ms = 0;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mc = 0;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mwhile c < x {[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    s = c + s;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    c = c + 1;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m}[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mreturn s;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTestTypeInf:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf type substitution [int/a]a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf type substitution [int/a]b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf type substitution [int/a]bool[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf type substitution ([int/a]o[a/b])b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf unification (Int,Bool) should fail.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf unification (Int,a) should ground a.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf unification {(Int,a), (a, b)} should ground b.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf unification {(a, b), (Int, Int) (Int,a)} should ground b.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- test typeinf sum() *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  org.scalatest.exceptions.TestFailedException was thrown. (TestTypeInf.scala:132)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- test typeinf fib *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  org.scalatest.exceptions.TestFailedException was thrown. (TestTypeInf.scala:178)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf should fail in grounding input and x's types[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf should fail in unifying int with bool[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- test typeinf no while and if *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  org.scalatest.exceptions.TestFailedException was thrown. (TestTypeInf.scala:273)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test typeinf one variable[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- test typeinf 3 variables *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  org.scalatest.exceptions.TestFailedException was thrown. (TestTypeInf.scala:323)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 553 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 42[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 7, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 38, failed 4, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m*** 4 TESTS FAILED ***[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestMaximalMunch[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestLexer[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestMMUpDown[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestPAInt[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestParser[0m
[0m[[0m[0mdebug[0m] [0m[0m	sutd.compiler.simp.TestSimpInt[0m
[0m[[0m[31merror[0m] [0m[0mFailed tests:[0m
[0m[[0m[31merror[0m] [0m[0m	sutd.compiler.simp.TestTypeInf[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mtest[0m) sbt.TestsFailedException: Tests unsuccessful[0m
